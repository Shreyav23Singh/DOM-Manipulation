** Window.localStorage **
==>  The localStorage read-only property of the interface allows you to access a Storage object for the Document's Origin ; the stored data is saved across the browser
     sessions.
     
 ==>  LocalStorage is similar to sessionStorage , except that while localStorage data has no expiration time , sessionStorage data cleared when the page sessions ends i.e, 
    when the page is closed.
 
 ==>  The keys and the values stored with localStorage are always in the UTF-16 string format , which uses two bytes per character.As with objects , integer keys are automatically 
      converted to strings.
 
 * * SYNTAX * *
 ==> To add an item --- > localStorage.setItem('myCar' , 'Fortuner' );
 
 ==> To read an item --- >const car=localStorage.getItem('myCar');
 
 ==>To remove an item --> localStorage.removeItem('myCar');
 
 ==>To remove all the localStorage --> localStorage.clear();
 
 
 **  storage.length
==> Returns the number of key/value pairs.

** storage.key 
==> Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.

value = storage.getItem (key)âœ”MDN
value = storage[key]
Returns the current value associated with the given key, or null if the given key does not exist.

** storage.setItem 
==> storage[key] = value
Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.

Throws a "QuotaExceededError" DOMException exception if the new value couldn't be set. (Setting could fail if, e.g., the user has disabled storage for the site, or if the quota has been exceeded.)

Dispatches a storage event on Window objects holding an equivalent Storage object.

** storage.removeItem 
==> delete storage[key]
Removes the key/value pair with the given key, if a key/value pair with the given key exists.

Dispatches a storage event on Window objects holding an equivalent Storage object.

** storage.clear()
==> Removes all key/value pairs, if there are any.

Dispatches a storage event on Window objects holding an equivalent Storage object.

-----------------------------------********************--------------------------------------------------*********************--------------------------------

<!DOCTYPE html>
<html>
<body>

<h1>The Window Object</h1>
<h2>The localStorage Property</h2>

<p>Saved name is:</p>
<p id="demo"></p>

<script>
// Set Item
localStorage.setItem("firstname", "Smith");
// Retrieve
document.getElementById("demo").innerHTML = localStorage.getItem("firstname");
</script>

</body>
</html>
